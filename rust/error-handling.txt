Error Handling
==============

Error handling is a core part of writing reliable Rust programs.

1. `Result` and `Option`: The Foundation
----------------------------------------

Rust doesn't use exceptions. Instead, it uses *`Result`* and
*`Option`* types to handle errors and optional values.

- `Result<T, E>`: For functions that can succeed (`Ok(T)`) or fail
  (`Err(E)`).
- `Option<T>`: For values that might be present (`Some(T)`) or
  missing (`None`).



2. `match` — Explicit Handling
------------------------------

    let height: u32 = 0;
    let input = "42";

    match input.trim().parse::<u32>() {
        Ok(n) => println!("Parsed number: {}", n),
        Err(e) => println!("Error parsing: {}", e),
    }

    // OR

    match input.trim().parse::<u32>() {
        Ok(n) if n > 0 => {
            height = n;
            break;
        }

        // catch-all pattern
        _ => {
            println!("Error parsing: {}", e)
        }
    }

- `parse()` returns `Result<u32, ParseIntError>`.
- `match` is the most *explicit and safe* way to handle both success
  (`Ok`) and failure (`Err`).



3. `unwrap()` — Panic on Error
------------------------------

    let n = "42".parse::<u32>().unwrap();

- If parsing succeeds, `n` gets the value.
- If parsing fails, your program **panics and crashes**.

Use `unwrap()` only when you're *absolutely sure* it will succeed
(like hardcoded inputs or tests).



4. `expect("msg")` — Panic with Message
---------------------------------------

    let n = "42".parse::<u32>().expect("Failed to parse number");

Same as `unwrap()`, but you get a *custom error message* if it panics.
Better for debugging.



5. Pattern: `if let` (Simplified `match`)
-----------------------------------------

If you only care about the `Ok` case:

    if let Ok(n) = "42".parse::<u32>() {
        println!("Got number: {n}");
    }

Or for `Option`:

    if let Some(x) = some_option {
        println!("Got: {x}");
    }



When to Use What
----------------

| Use Case                   | Best Tool       | Why?                               |
| -------------------------- | --------------- | ---------------------------------- |
| Robust error handling      | `match`         | Explicit and safe                  |
| Sure it won't fail         | `unwrap()`      | Simple, but risky                  |
| Sure it won't fail + debug | `expect("msg")` | Like `unwrap`, but gives a message |
| Just care about success    | `if let`        | Concise for one branch             |



Real Example in Context
-----------------------

    use std::io::{self, Write};

    fn get_positive_integer() -> u32 {
        loop {
            print!("Enter a number: ");
            io::stdout().flush().unwrap(); // ensure prompt shows

            let mut input = String::new();
            io::stdin().read_line(&mut input).expect("Failed to read");

            match input.trim().parse::<u32>() {
                Ok(n) if n > 0 => return n,
                _ => println!("Please enter a positive integer."),
            }
        }
    }

- `expect`: panics with a message if `read_line` fails (rare)
- `unwrap`: used with `flush()` because failure is very unlikely
- `match`: handles the common parsing issue gracefully
